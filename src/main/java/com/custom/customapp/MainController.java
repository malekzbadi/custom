package com.custom.customapp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

import com.custom.customapp.model.Vote;

@Controller    // This means that this class is a Controller
@RequestMapping(path="api/v1/vote") // This means URL's start with /demo (after Application path)
public class MainController {
    // This means to get the bean called voteRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private VoteRepository voteRepository;

    @PostMapping(path="/addVote") // Map ONLY GET Requests
    public @ResponseBody String addNewVote (@RequestParam String userId
            , @RequestParam String country
            , @RequestParam String city
            , @RequestParam Integer happyScore
            , @RequestParam String datetime) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        System.out.println(userId);
        System.out.println(country);
        System.out.println(city);
        System.out.println(happyScore);
        System.out.println(datetime);
        UUID id = UUID.randomUUID();
        UUID userIdType = UUID.fromString(userId);
        Vote n = new Vote(id, userIdType, country, city, happyScore, datetime);
        voteRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/allVotes")
    public @ResponseBody Iterable<Vote> getAllVotes() {
        // This returns a JSON or XML with the users
        return voteRepository.findAll();
    }

    @GetMapping(path="id/{id}")
    public @ResponseBody Vote getVoteById(@PathVariable("id") UUID id){
        return voteRepository.getVoteById(id);
    }

    @GetMapping(path="country/{country}")
    public @ResponseBody List<Vote> getVoteByCountry(@PathVariable("country") String country){
        return voteRepository.getVoteByCountry(country);
    }

    @GetMapping(path="city/{city}")
    public @ResponseBody List<Vote> getVoteByCity(@PathVariable("city") String city){
        return voteRepository.getVoteByCity(city);
    }

    @GetMapping(path="happyScore/{happyScore}")
    public @ResponseBody List<Vote> getVoteByHappyScore(@PathVariable("happyScore") Integer happyScore){
        return voteRepository.getVoteByHappyScore(happyScore);
    }

    @GetMapping(path="candy/{userId}")
    public @ResponseBody List<Vote> getVoteByUserId(@PathVariable("userId") UUID userId){
        return voteRepository.getVoteByUserId(userId);
    }

    @DeleteMapping(path="{id}")
    public @ResponseBody void deleteVoteById(@PathVariable("id") UUID id) {
        voteRepository.delete(getVoteById(id));
    }
}